import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { HttpClient, HttpClientModule } from '@angular/common/http';

@Component({
  selector: 'app-child4',
  standalone: true,
  imports: [FormsModule, CommonModule, HttpClientModule],
  templateUrl: './child4.component.html',
  styleUrls: ['./child4.component.css']
})
export class Child4Component {
  title = 'firstproj';

  // Form data for the requisition form
  formData: { 
    requisitionDate: string;
    employeeId: string;
    department: string;
    name: string;
    totalQuantity: number;
    totalRequired: number;
    createdAt: string;
    items: { 
      serialNo: number;
      productName: string;
      unit: string;
      quantity: number;
      required: number;
      formId?: number;
    }[];
  } = {
    requisitionDate: new Date().toISOString().split('T')[0],  // Format: YYYY-MM-DD
    employeeId: '',
    department: '',
    name: '',
    totalQuantity: 0,
    totalRequired: 0,
    createdAt: new Date().toISOString(),
    items: [
      { serialNo: 1, productName: '', unit: '', quantity: 0, required: 0, formId: 0 }
    ]
  };

  totalQuantity: number = 0;
  totalRequired: number = 0;
  totalUnits: number = 0;

  // API endpoint to add new stock using the StationeryItem schema
  private addStockApiUrl = 'https://localhost:44303/api/StationeryItems';

  constructor(private route: ActivatedRoute, private http: HttpClient) {}

  // Called when the form is submitted
  onSubmit() {
    console.log('Form Data:', this.formData);

    // Loop through each item in the form data and post as a new stock item
    this.formData.items.forEach(item => {
      // Prepare a new stock object matching the StationeryItem schema.
      // Note: We do not include stationery_id because it is auto-generated by the database.
      const newStock = {
        stationery_product_name: item.productName,
        stationery_quantity_left: item.quantity,
        stationery_unit: item.unit
      };

      // POST the new stock item to the API
      this.http.post(this.addStockApiUrl, newStock).subscribe(
        (response) => {
          console.log('Stock added successfully:', response);
        },
        (error) => {
          console.error('Error adding stock:', error);
        }
      );
    });

    alert('Stock has been submitted.');
  }

  // Helper method to calculate totals (if needed)
  calculateTotals() {
    this.totalQuantity = 0;
    this.totalRequired = 0;
    this.totalUnits = 0;

    this.formData.items.forEach(item => {
      this.totalQuantity += item.quantity || 0;
      this.totalRequired += item.required || 0;
    });
  }

  addRow() {
    const newSerial = this.formData.items.length + 1;
    this.formData.items.push({
      serialNo: newSerial,
      productName: '',
      unit: '',
      quantity: 0,
      required: 0,
      formId: 0
    });
  }

  delRow(index: number) {
    if (this.formData.items.length > 1) {
      this.formData.items.splice(index, 1);
    }
  }
}
